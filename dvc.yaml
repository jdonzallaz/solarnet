stages:
  download-dataset:
    cmd: python -m solarnet.main download sdo-benchmark-zip
    deps:
      - config/minio.yaml
    outs:
      - data/sdo-benchmark.placeholder:
          persist: true
          cache: false

  train:
    foreach:
      binary:
        experiment: binary_classification
        path: binary
      multiclass:
        experiment: multiclass_classification
        path: multiclass
    do:
      cmd: python -m solarnet.main train +experiment=${item.experiment}
      params:
        - config/config.yaml:
            - data
            - model
            - trainer
            - name
            - seed
            - tracking
            - gpus
      deps:
        - solarnet/tasks/train.py
        - solarnet/models/baseline.py
        - data/sdo-benchmark.placeholder
        - config/experiment/${item.experiment}.yaml
      outs:
        - models/${item.path}/model.ckpt
        - models/${item.path}/history.png:  # TODO: Fix not visible data
            cache: false
        - models/${item.path}/model_summary.txt:
            cache: false

  test:
    foreach:
      binary:
        experiment: binary_classification
        path: binary
      multiclass:
        experiment: multiclass_classification
        path: multiclass
    do:
      cmd: python -m solarnet.main test +experiment=${item.experiment}
      params:
        - config/config.yaml:
            - data
            - model
            - trainer
            - seed
            - tracking
            - gpus
      deps:
        - solarnet/tasks/test.py
        - solarnet/models/baseline.py
        - data/sdo-benchmark.placeholder
        - models/${item.path}/model.ckpt
        - config/experiment/${item.experiment}.yaml
      metrics:
        - models/${item.path}/metrics.yaml:
            cache: false
      outs:
        - models/${item.path}/test_samples.png:
            cache: false
        - models/${item.path}/confusion_matrix.png:
            cache: false

  generate-report:
    foreach:
      binary:
        report: "models/binary/report.md"
        path: binary
      multiclass:
        report: "models/multiclass/report.md"
        path: multiclass
    do:
      # TODO: add model size (x kB)
      # TODO: add diff with naive method
      # TODO: add number of train/test samples
      # TODO: add early stopping epoch, running time, machine/gpu
      cmd: >-
        printf "# Model report\n" > ${item.report} &&
        printf "## Training\n" >> ${item.report} &&
        printf "### Parameters\n" >> ${item.report} &&
        printf "```yaml\n" >> ${item.report} &&
        cat models/${item.path}/config.yaml >> ${item.report} &&
        printf "```\n" >> ${item.report} &&
        printf "### Model architecture\n" >> ${item.report} &&
        printf "```\n" >> ${item.report} &&
        cat models/${item.path}/model_summary.txt >> ${item.report} &&
        printf "```\n" >> ${item.report} &&
        printf "### Loss curve\n" >> ${item.report} &&
        printf "![Loss curve](history.png 'Loss curve')\n\n" >> ${item.report} &&
        printf "## Test\n" >> ${item.report} &&
        printf "### Metrics\n" >> ${item.report} &&
        dvc metrics show --show-md models/${item.path}/metrics.yaml >> ${item.report} &&
        printf "### Confusion matrix\n" >> ${item.report} &&
        printf "![Confusion matrix](confusion_matrix.png 'Confusion matrix')\n\n" >> ${item.report} &&
        printf "### Test samples\n" >> ${item.report} &&
        printf "![Test samples](test_samples.png 'Test samples')\n\n" >> ${item.report}
      deps:
        - models/${item.path}/config.yaml
        - models/${item.path}/confusion_matrix.png
        - models/${item.path}/history.png
        - models/${item.path}/metrics.yaml
        - models/${item.path}/model_summary.txt
        - models/${item.path}/test_samples.png
      outs:
        - ${item.report}:
            cache: false
